- name: Init Kafka
  hosts: 
    - broker
  tasks:
    - name: Make folder
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ base_path }}/"
        - "{{ base_path }}/{{ listener_port }}/"

    - name: Copy config file
      copy:
        src: "./config/kraft/server.properties"
        dest: "{{ base_path }}/{{ listener_port }}/"

    - name: Replace multiple lines 
      lineinfile: 
        path: "{{ base_path }}/{{ listener_port }}/server.properties"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
       - regexp: "node.id=1"
         line: "node.id={{ listener_port }}"
       - regexp: "controller.quorum.voters=1@localhost:9093"
         line: "controller.quorum.voters={{ qourum_voters }}"
       - regexp: "listeners=PLAINTEXT://:9092,CONTROLLER://:9093" 
         line: "listeners=PLAINTEXT://:{{ listener_port }},CONTROLLER://:{{ qourum_port }}"
       - regexp: "advertised.listeners=PLAINTEXT://localhost:9092"
         line: "advertised.listeners=PLAINTEXT://{{ ansible_host }}:{{ listener_port }}"
       - regexp: "log.dirs=/tmp/kraft-combined-logs"
         line: "log.dirs={{ base_path }}/{{ listener_port }}/kraft-combined-logs"

- name: Build Kafka
  hosts: base
  tasks:
    - name: Check if file exists
      stat:
        path: "{{ base_path }}/kafka_{{ scala_version }}.tgz"
      register: downloaded

    - name: Download kafka
      get_url:
        url: https://downloads.apache.org/kafka/{{ kafka_version }}/kafka_{{ scala_version }}.tgz
        dest: "{{ base_path }}/"
      when: not downloaded.stat.exists

    - name: File tar
      unarchive: 
        src: "{{ base_path }}/kafka_{{ scala_version }}.tgz"
        dest: "{{ base_path }}"
        remote_src: yes
    
- name: Start kafka node 
  hosts:
    - broker
  tasks:
    - name: Stop listener_port
      shell: "lsof -i :{{ listener_port }} | wc -l"
      register: port_status

    - name: Terminate process
      shell: kill -9 `lsof -ti:{{ listener_port }}`
      when: port_status.stdout > "0"
    
    - name: Stop qourum_port
      shell: "lsof -i :{{ qourum_port }} | wc -l"
      register: port_status

    - name: Terminate process
      shell: kill -9 `lsof -ti:{{ qourum_port }}`
      when: port_status.stdout > "0"

    - name: Get UUID
      shell: "{{ base_path }}/kafka_{{ scala_version }}/bin/kafka-storage.sh random-uuid"
      register: storage_uuid
      run_once: true

    - name: Format storage
      shell: "{{ base_path }}/kafka_{{ scala_version }}/bin/kafka-storage.sh format -t {{ storage_uuid.stdout }} -c {{ base_path }}/{{ listener_port }}/server.properties --ignore-formatted"

    - name: Start kafka broker
      shell: "{{ base_path }}/kafka_{{ scala_version }}/bin/kafka-server-start.sh -daemon {{ base_path }}/{{ listener_port }}/server.properties"


