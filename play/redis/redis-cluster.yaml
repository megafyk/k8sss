- name: Init Redis
  hosts:
    - master
    - slave
  tasks:
    - name: Remove folder and files
      file: path="{{ base_path }}/{{ port }}/" state=absent

    - name: Make folder
      file:
        state: directory
        path: "{{ item }}"
      loop:
        - "{{ base_path }}/"
        - "{{ base_path }}/{{ port }}/"

    - name: Remove current metadata file
      file:
        path: "{{ base_path }}/{{ port }}/{{ item }}"
        state: absent
      loop:
        - "nodes-{{ port }}.conf"

    - name: Copy config file
      copy:
        src: "./redis.conf"
        dest: "{{ base_path }}/{{ port }}/"

    - name: Replace multiple lines
      lineinfile:
        path: "{{ base_path }}/{{ port }}/redis.conf"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - regexp: "dir ./"
          line: "dir {{ base_path }}/{{ port }}/"
        - regexp: "port 6379"
          line: "port {{ port }}"
        - regexp: "pidfile redis.pid"
          line: "pidfile {{ base_path }}/{{ port }}/redis.pid"
        - regexp: "logfile redis.log"
          line: "logfile {{ base_path }}/{{ port }}/redis.log"
        - regexp: "cluster-config-file nodes-6379.conf"
          line: "cluster-config-file {{ base_path }}/{{ port }}/nodes-{{ port }}.conf"

- name: Build Redis
  hosts: build
  tasks:
    - name: Check if file exists
      stat:
        path: "{{ base_path }}/redis-{{ redis_version }}.tar.gz"
      register: downloaded

    - name: Download redis
      get_url:
        url: https://github.com/redis/redis/archive/{{ redis_version }}.tar.gz
        dest: "{{ base_path }}/"
      when: not downloaded.stat.exists

    - name: File tar
      unarchive:
        src: "{{ base_path }}/redis-{{ redis_version }}.tar.gz"
        dest: "{{ base_path }}"
        remote_src: yes

    - name: Build from src
      shell: "cd {{ base_path }}/redis-{{ redis_version }} && make"

- name: Start redis node
  hosts:
    - master
    - slave
  tasks:
    - name: Check if port is running {{ port }}
      shell: "lsof -i :{{ port }} | wc -l"
      register: port_status

    - name: Terminate process
      shell: kill -9 `lsof -ti:{{ port }}`
      when: port_status.stdout > "0"

    - name: Start redis node
      shell: "{{ base_path }}/redis-{{ redis_version }}/src/redis-server {{ base_path }}/{{ port }}/redis.conf"

- name: Start redis cluster
  hosts: topo
  tasks:
    - name: Set REDIS_PASSWORD
      set_fact:
        REDIS_PASSWORD: "foobared"

    - name: Start redis cluster with responses
      shell: |
        export REDIS_PASSWORD="{{ REDIS_PASSWORD }}" && \
        echo "yes" | {{ base_path }}/redis-{{ redis_version }}/src/redis-cli --cluster create {{ topo_path }} --cluster-replicas {{ topo_num }} -a $REDIS_PASSWORD
